package {package_path}.{path_class};

import {package_path}.{path_class_usecase_update}.{class_name_usecase_update};
import {package_path}.{path_class_usecase_insert}.{class_name_usecase_insert};
import {package_path}.{path_class_usecase_search}.{class_name_usecase_search};
import {package_path}.{path_class_usecase_search}.{class_name_usecase_searchid};
import {package_path}.{path_class_usecase_delete}.{class_name_usecase_delete};

import {package_path}.{path_class_request_update}.{class_name_request_update};
import {package_path}.{path_class_request_insert}.{class_name_request_insert};
import {package_path}.{path_class_request_search}.{class_name_request_search};
import {package_path}.{path_class_response_insert}.{class_name_response_insert};
import {package_path}.{path_class_response_search}.{class_name_response_search};

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springdoc.api.annotations.ParameterObject;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

@RestController
@RequestMapping("{table_name_lower}")
@Tag(name = "{table_name_lower}", description = "Cadastro das {table_name_lower}")
public class {class_name} {{

    private final {class_name_usecase_insert} usecase_cadastra;
    private final {class_name_usecase_update} usecase_atualiza;
    private final {class_name_usecase_search} usecase_busca;
    private final {class_name_usecase_searchid} usecase_buscaporid;
    private final {class_name_usecase_delete} usecase_delete;

    public {class_name}(final {class_name_usecase_insert} usecase_cadastra,
                              final {class_name_usecase_update} usecase_atualiza,
                              final {class_name_usecase_search} usecase_busca,
                              final {class_name_usecase_searchid} usecase_buscaporid,
                              final {class_name_usecase_delete} usecase_delete) {{
        this.usecase_cadastra = usecase_cadastra;
        this.usecase_atualiza = usecase_atualiza;
        this.usecase_busca = usecase_busca;
        this.usecase_buscaporid = usecase_buscaporid;
        this.usecase_delete = usecase_delete;
    }}

    @Operation(summary = "Cadastrar {table_name_lower}")
    @ApiResponses(value = {{
        @ApiResponse(responseCode = "201", description = "Cadastro realizado com sucesso", 
                content = {{ @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = {class_name_response_insert}.class)) }}),
        @ApiResponse(responseCode = "400", description = "Erro de validação no entrada de dados", content = @Content) ,
        @ApiResponse(responseCode = "422", description = "Erro de negócio ao cadastrar {table_name_lower}", content = @Content) }})        
    @PostMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> cadastrar(@Valid @RequestBody final {class_name_request_insert} request) {{

        return ResponseEntity.status(HttpStatus.CREATED).body(usecase_cadastra.cadastrar(request));

    }}

    @Operation(summary = "Atualizar {table_name_lower}")
	@ApiResponses(value = {{
			@ApiResponse(responseCode = "204", description = "Atualização realizada com sucesso", content = @Content ),
            @ApiResponse(responseCode = "400", description = "Erro de validação no entrada de dados", content = @Content) ,
            @ApiResponse(responseCode = "417", description = "Registro não encontrado", content = @Content),
			@ApiResponse(responseCode = "422", description = "Erro de negócio ao alterar o registro", content = @Content) }})
    @PutMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> atualizar(@Valid @RequestBody final {class_name_request_update} request) {{

       usecase_atualiza.atualizar(request);
       return ResponseEntity.noContent().build();

    }}

	@Operation(summary = "Excluir {table_name_lower} a partir do seu ID")
	@ApiResponses(value = {{
			@ApiResponse(responseCode = "204", description = "Informação adicional excluída", content = @Content),
            @ApiResponse(responseCode = "400", description = "Id zero ou negativo", content = @Content) ,
            @ApiResponse(responseCode = "417", description = "Registro não encontrado", content = @Content),
			@ApiResponse(responseCode = "422", description = "Erro de negócio ao excluir {table_name_lower}", content = @Content) }})    
    @DeleteMapping(path = "{{id}}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> excluirPor(@PathVariable {datatype_id} id) {{

        usecase_delete.excluirPor(id);
        return ResponseEntity.noContent().build();

    }}

    @Operation(summary = "Consultar {table_name_lower} a partir do seu ID")
	@ApiResponses(value = {{ @ApiResponse(responseCode = "200", description = "{table_name_lower} encontrado", content = {{
			@Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = {class_name_response_search}.class)) }}),
            @ApiResponse(responseCode = "400", description = "Id zero ou negativo", content = @Content) ,
			@ApiResponse(responseCode = "417", description = "Registro não encontrado", content = @Content) }})    
    @GetMapping(path = "{{id}}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> buscarPor(@PathVariable {datatype_id} id) {{

        return ResponseEntity.ok(usecase_buscaporid.buscarPor(id));

    }}

    @Operation(summary = "Consultar  {table_name_lower}, filtrando por {{id}}, nome")
	@ApiResponses(value = {{
        @ApiResponse(responseCode = "200", description = "Encontrada uma ou mais {table_name_lower}", content = {{
                @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, array = @ArraySchema(schema = @Schema(implementation = {class_name_response_search}.class)))
        }}),
        @ApiResponse(responseCode = "204", description = "Nenhum registro encontrado", content = @Content) 
    }})
    @GetMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Object> buscar(
        @RequestParam(value = "id", defaultValue = "0") {datatype_id} id,
        @RequestParam(value = "nome", defaultValue = "") String nome,
        @ParameterObject @PageableDefault(sort = "nome", direction = Direction.DESC, page = 0, size = 10) Pageable paginacao) {{

        var request = {class_name_request_search}.builder()
                       .id(id) 
                       .nome(nome)
                       .paginacao(paginacao)
                       .build();

        return ResponseEntity.ok(usecase_busca.buscar(request));

    }}




}}